{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "EP7oNTG1TGiJ"
      },
      "outputs": [],
      "source": [
        "# Init some code libraries\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns; sns.set()\n",
        "import numpy as np\n",
        "import random"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "range = np.random.RandomState(1) #creates a random seed\n",
        "x = 10 * range.rand(50) #get 50 random float values between 0 and 10\n",
        "y = 2 * x - 5 + 2*range.randn(50) #get 50 values of y = f(x) + small random\n",
        "plt.scatter(x, y);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "2cWgrTVMTb25",
        "outputId": "479d8518-270c-41fe-aa77-d340d01d9a64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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MAAAptDuCAARQ2AHgIghsANAxNTsXc7caURnzl1SB/uuAEBeTQZ2TiMCgOJqshTDaUQAUFxNBnZOIwKA4moysIfxTFMACIuaDOxhPNMUAMKiJm+ezj2NiK4YAJivJgO79M/TiGzd3hMAiqnJUgwAoDgCOwBETM2WYorJrUhNn7ukBLV3ABaKVGBnRSoARKwUw4pUAIhYYGdFKgBELLCzIhUAIhbYWZEKABG7eTp3RSpdMQBsFanALv1zRSoA2CpSpRgAAIEdACKHwA4AEUNgB4CICc3N01isLpDX1jIb523jnCU7523jnKXy513qeXWO4zimBgQACB6lGACIGAI7AEQMgR0AIobADgARQ2AHgIghsANAxBDYASBiCOwAEDEEdgCImJoN7MePH9c999yju+++W/fcc4/+9re/BT0kz83MzOihhx7S3XffrY0bN+pb3/qWzpw5E/SwfPPSSy/pi1/8oj755JOgh+KLS5cuaXh4WF/96le1ceNG/fCHPwx6SL54//33tXnzZn3961/Xpk2btG/fvqCHZFwqlVJ/f/81/56NxTWnRt1///3OyMiI4ziOMzIy4tx///0Bj8h7MzMzzu9+97v835999lnn+9//foAj8s+RI0ecBx980PnKV77ifPzxx0EPxxfPPPOMs3PnTiebzTqO4zhTU1MBj8h72WzW6evry/+Mjx075tx2221OJpMJeGRmHT582Dl58uQ1/55NxbWazNjT6bTGxsY0MDAgSRoYGNDY2Fjks9e2tjbdfvvt+b/fdtttOnnyZIAj8sfly5f19NNP66mnngp6KL6ZnZ3VyMiIHnvsMdXVfb7Z0/XXXx/wqPwRi8V0/vx5SdL58+e1ZMkSxWI1GaqK6uvrUzKZnPeYybgWmt0d3ZiYmNDSpUsVj8clSfF4XEuWLNHExIQ6OjoCHp0/stms3nrrLfX39wc9FM+98MIL2rRpk2688cagh+KbEydOqK2tTS+99JJ+//vf67rrrtNjjz2mvr6+oIfmqbq6Oj3//PN69NFHtXjxYs3OzupnP/tZ0MPyhcm4Fq2PQYs888wzWrx4se67776gh+KpP/7xjzpy5IgGBweDHoqvMpmMTpw4oVtvvVVvv/22tm/frm3btunChQtBD81TV65c0U9/+lPt2rVL77//vl555RU9/vjjmp2dDXpoNaUmA3symdSpU6eUyWQkff6f4PTp09f8ahNVqVRKf//73/X8889H7lfUqx0+fFjj4+Nav369+vv7NTk5qQcffFAHDhwIemieSiaTqq+vz/9a/uUvf1nt7e06fvx4wCPz1rFjx3T69Gn19vZKknp7e9XU1KTx8fGAR+Y9k3GtJqNCIpFQT0+PRkdHJUmjo6Pq6emxogzzk5/8REeOHNHLL7+shoaGoIfjuYcfflgHDhzQ/v37tX//fnV1dennP/+51qxZE/TQPNXR0aHbb79dBw8elPR5t0Q6ndYXvvCFgEfmra6uLk1OTuqvf/2rJGl8fFzpdFo33XRTwCPznsm4VrMHbYyPj2toaEjnzp1Ta2urUqmUbrnllqCH5am//OUvGhgY0PLly7Vo0SJJ0o033qiXX3454JH5p7+/X6+++qpWrFgR9FA8d+LECf3gBz/Q2bNnVV9fr8cff1xr164Nelie+81vfqPXXnstf9P429/+tu66666AR2XWjh07tG/fPk1PT6u9vV1tbW165513jMW1mg3sAIDCarIUAwAojsAOABFDYAeAiCGwA0DEENgBIGII7AAQMQR2AIgYAjsARMz/A2SezIFBfue6AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m_x = np.mean(x) #mean of x\n",
        "m_y = np.mean(y) #mean of y\n",
        "n = np.size(x) #number of samples\n",
        "SS_xy = np.sum(y*x) - n*m_y*m_x #cross deviation y to x\n",
        "SS_xx = np.sum(x*x) - n*m_x*m_x #cross deviation of x\n",
        "m = SS_xy / SS_xx\n",
        "b = m_y - b*m_x\n",
        "print(m, b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XV79tdfKmr2u",
        "outputId": "cfe33690-1a59-45af-ce05-334fafb0f266"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.0544176207213902 4.938679987667096\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mx = np.mean(x) #mean of x\n",
        "my = np.mean(y) #mean of y\n",
        "mxy = np.mean(x*y)\n",
        "mx2 = np.mean(x*x)\n",
        "m = (mxy - my*mx)/(mx2-mx*mx)\n",
        "b = my - m*m_x\n",
        "print(m, b)\n",
        "#ordinary least squares\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xjD-K6k80Bb3",
        "outputId": "b7b89d58-14c1-486e-e260-e50f5fd52c52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.05441762072139 -4.997154171106405\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x2 = 10 * range.rand(50) #get 50 random float values between 0 and 10\n",
        "y2 = 2 * (x2*x2) + .3*x2 - 5 + 8*range.randn(50) #get 50 values of y = f(x) + small random\n",
        "plt.scatter(x2, y2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "ql-KbvYw2Ms1",
        "outputId": "2bcf25ca-d76a-4158-eba1-d7ce481a7479"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f32577b4610>"
            ]
          },
          "metadata": {},
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "AQcZUNPUS9cB"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
